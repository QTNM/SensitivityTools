/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "RooBDInverseHPdf.h"

#include <RooAbsReal.h>
#include <RooAbsCategory.h>

#include <Riostream.h>
#include <TMath.h>

#include <cmath>

ClassImp(RooBDInverseHPdf);

RooBDInverseHPdf::RooBDInverseHPdf(const char *name, const char *title,
				 RooAbsReal& _en,
				 RooAbsReal& _munu)
   : RooAbsPdf(name,title),
   en("en","en",this,_en),
   munu("munu","munu",this,_munu)
{
}

RooBDInverseHPdf::RooBDInverseHPdf(RooBDInverseHPdf const &other, const char *name)
   : RooAbsPdf(other,name),
   en("en",this,other.en),
   munu("munu",this,other.munu)
{
}


double RooBDInverseHPdf::evaluate() const 
{
   return RooBDInverseHPdf_evaluate(en, munu); 
}

void RooBDInverseHPdf::computeBatch(double *output, std::size_t size, RooFit::Detail::DataMap const &dataMap) const 
{ 
   std::span<const double> enSpan = dataMap.at(en);
   std::span<const double> munuSpan = dataMap.at(munu);

   for (std::size_t i = 0; i < size; ++i) {
      output[i] = RooBDInverseHPdf_evaluate(enSpan.size() > 1 ? enSpan[i] : enSpan[0],
                               munuSpan.size() > 1 ? munuSpan[i] : munuSpan[0]);
   }
} 
void RooBDInverseHPdf::translate(RooFit::Detail::CodeSquashContext &ctx) const
{
   ctx.addResult(this, ctx.buildCall("RooBDInverseHPdf_evaluate", en, munu));
}
